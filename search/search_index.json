{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Store Platform","text":"<p>A store backend built as a university project by Gustavo Barroso Souza Cruz. The platform showcases modern micro-services, CI/CD and DevOps practices on top of Spring Boot 3, PostgreSQL, Redis, Docker / Kubernetes, Jenkins and MkDocs.</p>"},{"location":"#key-features","title":"Key Features","text":"Layer Highlights Data PostgreSQL schemas per service \u2022 Redis cache for hot products and orders Security Bearer token auth &amp; role-based access control CI/CD Jenkins declarative pipelines \u2192 Docker Hub \u2192 Minikube/\u200bKubernetes Docs Auto-published with MkDocs-Material + live Mermaid diagrams"},{"location":"#repository-map","title":"Repository Map","text":"Domain \u201cContract\u201d module Implementation (Spring Boot service) Authentication <code>auth</code> <code>auth-service</code> Accounts <code>account</code> <code>account-service</code> Products <code>product</code> <code>product-service</code> Orders <code>order</code> <code>order-service</code> Gateway <code>gateway</code> <code>gateway-service</code> Exchange Rates n/a <code>exchange-service</code> \u2013 Python <p>Tip: Cada pasta <code>*-service</code> inclui seu pr\u00f3prio Dockerfile, manifests Kubernetes (<code>k8s/*.yaml</code>) e Jenkinsfile.</p>"},{"location":"#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>flowchart TB\n    subgraph \"Clients\"\n        Web[\"Web UI\"]:::external\n    end\n\n    Web --&gt; Gateway\n\n    Gateway[\"API Gateway\\n(Spring Boot)\"]:::gateway\n\n    subgraph \"Kubernetes Cluster\"\n        style Kubernetes Cluster stroke-dasharray: 5 5\n        subgraph \"Services\"\n            Auth[\"auth-service\\n(Spring Boot)\"]:::service\n            Account[\"account-service\\n(Spring Boot)\"]:::service\n            Product[\"product-service\\n(Spring Boot)\"]:::service\n            Order[\"order-service\\n(Spring Boot)\"]:::service\n            Exchange[\"exchange-service\\n(Python)\"]:::service\n        end\n        subgraph \"Databases\"\n            AuthDB[\"auth-db\\n(PostgreSQL)\"]:::db\n            AccountDB[\"account-db\\n(PostgreSQL)\"]:::db\n            ProductDB[\"product-db\\n(PostgreSQL)\"]:::db\n            OrderDB[\"order-db\\n(PostgreSQL)\"]:::db\n        end\n    end\n\n    Gateway --&gt; Auth\n    Gateway --&gt; Account\n    Gateway --&gt; Product\n    Gateway --&gt; Order\n    Gateway --&gt; Exchange\n\n    Auth --&gt; AuthDB\n    Account --&gt; AccountDB\n    Product --&gt; ProductDB\n    Order --&gt; OrderDB\n\n    Order --&gt; Product\n    Order --&gt; Exchange\n\n    subgraph \"CI/CD &amp; Deployment\"\n        Jenkins[\"Jenkins\"]:::external\n        Registry[\"Docker Registry\"]:::external\n        K8s[\"Kubernetes\"]:::external\n        Jenkins --&gt; Registry\n        Registry --&gt; K8s\n    end\n\n    subgraph \"Documentation\"\n        MkDocs[\"MkDocs\"]:::external\n        GHPages[\"GitHub Pages\"]:::external\n        MkDocs --&gt; GHPages\n    end\n\n    click Gateway \"https://github.com/gubscruz/platform/tree/main/api/gateway-service\"\n    click Auth \"https://github.com/gubscruz/platform/tree/main/api/auth-service\"\n    click Account \"https://github.com/gubscruz/platform/tree/main/api/account-service\"\n    click Product \"https://github.com/gubscruz/platform/tree/main/api/product-service\"\n    click Order \"https://github.com/gubscruz/platform/tree/main/api/order-service\"\n    click Exchange \"https://github.com/gubscruz/platform/tree/main/api/exchange-service\"\n    click Jenkins \"https://github.com/gubscruz/platform/blob/main/jenkins/compose.yaml\"\n    click MkDocs \"https://github.com/gubscruz/platform/blob/main/mkdocs.yml\"\n    click GHPages \"https://github.com/gubscruz/platform/tree/main/docs/\"\n\n    classDef gateway fill:#FFA500,stroke:#333,stroke-width:1px;\n    classDef service fill:#ADD8E6,stroke:#333,stroke-width:1px;\n    classDef db fill:#90EE90,stroke:#333,stroke-width:1px;\n    classDef external fill:#D3D3D3,stroke:#333,stroke-width:1px;</code></pre>"},{"location":"#videos","title":"Videos","text":""},{"location":"#personal-video","title":"Personal Video","text":""},{"location":"#group-videos","title":"Group Videos","text":"<p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"},{"location":"bottlenecks/cache/main/","title":"Cache","text":"<p>For the cache logic, I used Redis as the caching solution. Redis is an in-memory data structure store that can be used as a database, cache, and message broker. It is known for its speed and efficiency in handling data.</p> <p>Redis was deployed as a Kubernetes pod in the Minikube cluster. The setup file is located as follows:</p> <pre><code>api/\n  \u251c\u2500\u2500 k8s/\n  \u2502 \u2514\u2500\u2500 redis.yaml\n</code></pre> <p>It was implemented in the Product Service and the Order Service. </p>"},{"location":"bottlenecks/cache/main/#results-in-the-requests","title":"Results in the requests","text":"<p>When making a request to get a product, the first request took about 5 seconds to respond on postman, the second request took about 22 milliseconds, showing that the product was cached in Redis and the efficiency of the cache.</p> No CacheWith Cache <p></p> <p></p> <p>Redis setup</p> redis.yamlRedis PodProduct ServiceProduct Application <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: redis\nspec:\nreplicas: 1\nselector:\n    matchLabels:\n    app: redis\ntemplate:\n    metadata:\n    labels:\n        app: redis\n    spec:\n    containers:\n    - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: redis\nspec:\ntype: ClusterIP\nports:\n- port: 6379\nselector:\n    app: redis\n</code></pre> <p></p> <pre><code>@Service\npublic class ProductService {\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    @Cacheable(value = \"productById\", key = \"#idProduct\")\n    public Product findByIdProduct(String idProduct) {\n        return productRepository.findByIdProduct(idProduct).to();\n    }\n...\n}\n</code></pre> <pre><code>@SpringBootApplication\n@EnableCaching\npublic class ProductApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApplication.class, args);\n    }\n\n}\n</code></pre> <p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"},{"location":"bottlenecks/load-balancer/main/","title":"Load Balancer","text":"<p>For the Load Balancer, I used the NGINX Ingress Controller, which is a popular choice for managing ingress traffic in Kubernetes clusters. It acts as a reverse proxy and load balancer, being the only pod exposed and routing traffic to the gateway thats inside the cluster.</p> <p>The NGINX Ingress Controller is deployed as a kubernetes pod of type LoadBalancer in the minikube cluster.</p> <p>In the project, the setup file it located as follows:</p> <pre><code>gateway-service/\n    \u251c\u2500\u2500 k8s/\n    \u2502   \u2514\u2500\u2500 ingress-gateway.yaml\n</code></pre> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: gateway-ingress\n  namespace: default\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: loja.local\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: gateway\n            port:\n              number: 8080\n</code></pre>"},{"location":"bottlenecks/load-balancer/main/#request-flow","title":"Request flow","text":""},{"location":"bottlenecks/load-balancer/main/#visualizing-on-the-terminal","title":"Visualizing on the terminal","text":"<p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"},{"location":"em-dupla/aws-eks/","title":"Aws eks","text":""},{"location":"em-dupla/aws-eks/#videos","title":"Videos","text":""},{"location":"em-dupla/aws-eks/#aws-eks","title":"AWS &amp; EKS","text":""},{"location":"em-dupla/aws-eks/#presentation","title":"Presentation","text":"<p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"},{"location":"em-dupla/hpa/hpa/","title":"Horizontal Pod Autoscaler (HPA) Setup","text":""},{"location":"em-dupla/hpa/hpa/#1-hpa-configuration-applied","title":"1. HPA Configuration Applied","text":"<p>The <code>gateway</code> Deployment was autoscaled between 1 and 10 replicas with a target of 50 % CPU utilization:</p> <pre><code>kubectl autoscale deployment gateway \\\n  --cpu-percent=50 \\\n  --min=1 \\\n  --max=10\n</code></pre>"},{"location":"em-dupla/hpa/hpa/#2-load-generation","title":"2. Load Generation","text":"<p>A BusyBox pod was used to generate continuous requests against the <code>/info</code> endpoint:</p> <pre><code>kubectl run -i --tty load-generator --rm \\\n  --image=busybox:1.28 --restart=Never \\\n  -- /bin/sh -c 'while sleep 0.01; do \\\n    wget -q -O- http://gateway/info; \\\n  done'\n</code></pre>"},{"location":"em-dupla/hpa/hpa/#3-observed-scale-out","title":"3. Observed Scale-Out","text":"<p>Under load, the HPA increased the number of gateway replicas:</p> <p> </p>"},{"location":"em-dupla/hpa/hpa/#4-observed-scale-in","title":"4. Observed Scale-In","text":"<p>After terminating the load generator, the HPA decreased replicas back to the minimum:</p> <p></p>"},{"location":"exchange/main/","title":"Exchange API","text":"<p>REST API that allows the user to convert between currencies implemented with FastAPI<sup>1</sup></p> <ul> <li>Github repository: Exchange Service</li> </ul> <p>GET /exchange-rate/{from}/{to}</p> <p>Get the current of a coin from one currency to another. E.g. <code>GET /coin/USD/EUR</code>.</p> ResponsePostman <p><pre><code>{\n    \"sell\": 0.82,\n    \"buy\": 0.80,\n    \"date\": \"2021-09-01 14:23:42\",\n    \"id-account\": \"0195ae95-5be7-7dd3-b35d-7a7d87c404fb\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p></p> <p>This API uses the ExchangeRate-API to get the current exchange rates between currencies.</p> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p> <p>Gateway</p> <p>This API is consumed through the Gateway of the platform.</p> <pre><code>flowchart LR\n    subgraph api\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        gateway --&gt; others\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n        auth --&gt; account\n        gateway e1@==&gt; exchange:::color\n        e1@{ animate: true }\n    end\n    exchange e2@==&gt; 3partyapi@{label: \"ExchangeRate API\"}\n    internet e3@==&gt;|request| gateway\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef color fill:#f22\n    click exchange \"#exchange-api\" \"Exchange API\"</code></pre> <p>Code for the <code>exchange</code>:</p> main.py <pre><code>from datetime import datetime\nfrom os import getenv\nfrom typing import Optional\n\nimport httpx\nfrom fastapi import FastAPI, Header, HTTPException, status\nfrom pydantic import BaseModel, Field, validator\n\napp = FastAPI(\n    title=\"Exchange-Service\",\n    version=\"1.0.0\",\n    description=\"Converts currency pairs using https://www.exchangerate-api.com/\",\n)\n\nAPI_KEY: str | None = getenv(\"EXCHANGE_API_KEY\")\nBASE_URL = f\"https://v6.exchangerate-api.com/v6/{API_KEY}/pair\"\n\n\nclass ExchangeOut(BaseModel):\n    sell: float = Field(..., description=\"Rate to SELL &lt;from&gt; and receive &lt;to&gt;\")\n    buy: float  = Field(..., description=\"Rate to BUY  &lt;from&gt; paying   &lt;to&gt;\")\n    date: str   = Field(..., description=\"UTC timestamp of the quote\")\n    id_account: Optional[str] = Field(None, alias=\"id-account\")\n\n    @validator(\"date\", pre=True)\n    def _format_date(cls, v) -&gt; str:\n        if isinstance(v, datetime):\n            return v.strftime(\"%Y-%m-%d %H:%M:%S\")\n        return v\n\n@app.get(\n    \"/exchange-rate/{from_curr}/{to_curr}\",\n    response_model=ExchangeOut,\n    summary=\"Get FX quote\",\n)\nasync def get_exchange_rate(\n    from_curr: str,\n    to_curr: str,\n    id_account: str | None = Header(default=None, alias=\"Id-Account\"),\n):\n    if not API_KEY:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Exchange API key not configured (EXCHANGE_API_KEY).\",\n        )\n\n    url = f\"{BASE_URL}/{from_curr.upper()}/{to_curr.upper()}\"\n\n    async with httpx.AsyncClient(timeout=6.0) as client:\n        try:\n            r = await client.get(url)\n        except httpx.HTTPError as exc:\n            raise HTTPException(\n                status_code=status.HTTP_502_BAD_GATEWAY,\n                detail=f\"Upstream error: {exc}\",\n            )\n\n    if r.status_code != 200:\n        raise HTTPException(\n            status_code=status.HTTP_502_BAD_GATEWAY,\n            detail=f\"Provider returned {r.status_code}: {r.text}\",\n        )\n\n    data = r.json()\n    if data.get(\"result\") != \"success\":\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=f\"Provider error: {data.get('error-type')}\",\n        )\n\n    rate = float(data[\"conversion_rate\"])\n    sell = round(rate * 0.99, 6)\n    buy  = round(rate * 1.01, 6)\n\n    return ExchangeOut(\n        sell=sell,\n        buy=buy,\n        date=datetime.utcnow(),\n        id_account=id_account,\n    )\n</code></pre> <p>This MkDocs was created by Gustavo Barroso Souza Cruz</p> <ol> <li> <p>FastAPI - First Steps.\u00a0\u21a9</p> </li> </ol>"},{"location":"jenkins/main/","title":"Jenkins Pipeline Structure","text":"<p>Our Jenkins CI/CD pipeline is composed of four key stages:</p> <ol> <li>Checkout SCM - Automatically clones the repository from GitHub</li> <li>Dependencies - Installs all project dependencies using Maven</li> <li>Build - Compiles and packages the application with Maven</li> <li>Build &amp; Push Image - Creates multi-architecture Docker images and pushes them to DockerHub</li> </ol> <p>Future Enhancement: add <code>kubectl apply</code> deployment stages once our EKS cluster is ready</p>"},{"location":"jenkins/main/#architecture-diagrams","title":"Architecture Diagrams","text":"Jenkins PipelineCI/CD PipelineBuild ArtifactsBuild Process"},{"location":"jenkins/main/#jenkins-setup","title":"Jenkins Setup","text":"<p>The Jenkins environment is configured using Docker Compose:</p> <pre><code># docker compose up -d --build --force-recreate\nname: ops\n\nservices:\n\n  jenkins:\n    container_name: jenkins\n    build:\n      dockerfile_inline: |\n        FROM jenkins/jenkins:jdk21\n        USER root\n\n        # Install tools\n        RUN apt-get update &amp;&amp; apt-get install -y lsb-release iputils-ping maven\n\n        # Install Docker\n        RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \\\n          https://download.docker.com/linux/debian/gpg\n        RUN echo \"deb [arch=$(dpkg --print-architecture) \\\n          signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \\\n          https://download.docker.com/linux/debian \\\n          $(lsb_release -cs) stable\" &gt; /etc/apt/sources.list.d/docker.list\n        RUN apt-get update &amp;&amp; apt-get install -y docker-ce\n\n        # Install kubectl\n        RUN apt-get install -y apt-transport-https ca-certificates curl\n        RUN curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list\n        RUN chmod 644 /etc/apt/sources.list.d/kubernetes.list\n        RUN apt-get update &amp;&amp; apt-get install -y kubectl\n\n        RUN usermod -aG docker jenkins\n    ports:\n      - 9080:8080\n    volumes:\n      - ${CONFIG:-./config}/jenkins:/var/jenkins_home\n      - /var/run/docker.sock:/var/run/docker.sock\n    restart: always\n</code></pre>"},{"location":"jenkins/main/#pipeline-configuration","title":"Pipeline Configuration","text":""},{"location":"jenkins/main/#microservice-pipeline","title":"Microservice Pipeline","text":"<p>Each microservice contains a <code>Jenkinsfile</code> defining the CI/CD process:</p> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'product-service'\n        NAME = \"gubscruz/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependencies') {\n            steps {\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/main/#contract-pipeline","title":"Contract Pipeline","text":"<p>Contracts use a simplified pipeline focused on building and installing the artifacts:</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n}\n</code></pre> <p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"},{"location":"minikube/main/","title":"Minikube","text":"<p>For the minikube setup, I created a folder called <code>k8s</code> in each microservice with a <code>{service}.yaml</code> file that contains the Kubernetes deployment and service definitions for that microservice.  Also, in the main <code>k8s</code> folder, I have the <code>postgres.yaml</code> and <code>redis.yaml</code> files, which are the Kubernetes deployment and service definitions for the PostgreSQL and Redis services, respectively.</p> <p>Structure: <pre><code>k8s/\n  \u251c\u2500\u2500 postgresql.yaml\n  \u251c\u2500\u2500 redis.yaml\nservice1/\n  \u251c\u2500\u2500 k8s/\n  \u2502   \u2514\u2500\u2500 service1.yaml\nservice2/\n  \u251c\u2500\u2500 k8s/\n  \u2502   \u2514\u2500\u2500 service2.yaml\n</code></pre></p> <p>Pods: </p>"},{"location":"minikube/main/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"minikube/main/#pods-discovery","title":"Pods discovery","text":"<p>In the Kubernetes setup, each microservice is deployed as a separate pod. The only pod exposed is the ingress-nginx pod (Load Balancer), which is responsible for routing to the gateway service, who then routes to the other microservices as the ClusterIP is only accessible within the cluster.</p> <p></p>"},{"location":"minikube/main/#example-of-a-serviceyaml-file","title":"Example of a service.yaml file","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n      - name: product\n        image: gubscruz/product-service:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n\n        env:\n        - name: DATABASE_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: postgres-configmap\n              key: POSTGRES_HOST\n        - name: DATABASE_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_USER\n        - name: DATABASE_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: POSTGRES_PASSWORD\n\n        - name: SPRING_DATA_REDIS_HOST\n          value: redis\n        - name: SPRING_DATA_REDIS_PORT\n          value: \"6379\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: product\n  labels:\n    app: product\nspec:\n  type: ClusterIP\n  ports:\n  - port: 8080\n  selector:\n    app: product\n</code></pre> <p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"},{"location":"order/main/","title":"Order API","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway e5@==&gt; product\n        gateway e6@==&gt; order:::red\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    exchange --&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p>"},{"location":"order/main/#order-service","title":"Order Service","text":"<p>Github repository: Order Service</p> <pre><code>order/\n\u251c\u2500\u2500 Item.java\n\u251c\u2500\u2500 ItemModel.java\n\u251c\u2500\u2500 ItemParser.java\n\u251c\u2500\u2500 Order.java\n\u251c\u2500\u2500 OrderApplication.java\n\u251c\u2500\u2500 OrderModel.java\n\u251c\u2500\u2500 OrderRepository.java\n\u251c\u2500\u2500 OrderResource.java\n\u251c\u2500\u2500 OrderService.java\n</code></pre>"},{"location":"order/main/#order-contract","title":"Order (contract)","text":"<p>Github repository: Order</p> <pre><code>order/\n\u251c\u2500\u2500 ItemIn.java\n\u251c\u2500\u2500 ItemOut.java\n\u251c\u2500\u2500 OrderController.java\n\u251c\u2500\u2500 OrderIn.java\n\u251c\u2500\u2500 OrderOut.java\n</code></pre> <p>Diagrams</p> ArchitectureEntity ModelsRequest FlowMethods <p></p> <p></p> <p></p> <p></p>"},{"location":"order/main/#order-api","title":"Order API","text":"<p>POST /order</p> <p>Create a new order for the current user.</p> RequestResponsePostman <pre><code>{\n    \"items\": [\n        {\n            \"idProduct\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            \"quantity\": 2\n        },\n        {\n            \"idProduct\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            \"quantity\": 1\n        }\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 201 (created)\nResponse code: 400 (bad request), if the product does not exist.\n</code></pre></p> <p></p> <p>GET /order</p> <p>Get all orders for the current user.</p> ResponsePostman <p><pre><code>[\n    {\n        \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n        \"date\": \"2025-09-01T12:30:00\",\n        \"total\": 26.44\n    },\n    {\n        \"id\": \"0195ac33-cbbd-7a6e-a15b-b85402cf143f\",\n        \"date\": \"2025-10-09T03:21:57\",\n        \"total\": 18.6\n    }\n\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p></p> <p>GET /order/{id}</p> <p>Get the order details by its ID. The order must belong to the current user., otherwise, return a <code>404</code>.</p> ResponsePostman <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 404 (not found), if the order does not belong to the current user.\n</code></pre></p> <p></p> <p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"},{"location":"product/main/","title":"Product API","text":"<p>RESTful API for a store's <code>product</code>.</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway e5@==&gt; product:::red\n        product e2@==&gt; db\n\n    end\n    exchange --&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e5@{ animate: true }\n    classDef red fill:#fcc\n    click product \"#product-api\" \"Product API\"</code></pre> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p>"},{"location":"product/main/#product-service","title":"Product Service","text":"<p>Github repository: Product Service</p> <pre><code>product/\n\u251c\u2500\u2500 Product.java\n\u251c\u2500\u2500 ProductApplication.java\n\u251c\u2500\u2500 ProductModel.java\n\u251c\u2500\u2500 ProductRepository.java\n\u251c\u2500\u2500 ProductResource.java\n\u251c\u2500\u2500 ProductService.java\n</code></pre>"},{"location":"product/main/#product-contract","title":"Product (contract)","text":"<p>Github repository: Product</p> <pre><code>product/\n\u251c\u2500\u2500 ProductController.java\n\u251c\u2500\u2500 ProductIn.java\n\u251c\u2500\u2500 ProductOut.java\n</code></pre> <p>Diagrams</p> Request FlowArchitectureEntity Model <p></p> <p></p> <p></p>"},{"location":"product/main/#product-api","title":"Product API","text":"<p>The API has the following endpoints:</p> <p>POST /product</p> <p>Create a new product.</p> RequestResponsePostman <pre><code>{\n    \"name\": \"Feij\u00e3o\",\n    \"price\": 7,\n    \"description\": \"Dona Ana\",\n    \"category\": \"Cat I\"\n}\n</code></pre> <p><pre><code>{\n    \"idProduct\": \"b292bc8b-4c31-4d5e-8d18-032fdfd1c9d7\",\n    \"name\": \"Feij\u00e3o\",\n    \"category\": \"Cat I\",\n    \"description\": \"Dona Ana\",\n    \"price\": 7.0\n}\n</code></pre> <pre><code>Response code: 200 (OK)\n</code></pre></p> <p></p> <p>GET /product</p> <p>Get all products.</p> ResponsePostman <p><pre><code>[\n    {\n        \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n        \"name\": \"Tomato\",\n        \"price\": 10.12,\n        \"unit\": \"kg\"\n    },\n    {\n        \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n        \"name\": \"Cheese\",\n        \"price\": 0.62,\n        \"unit\": \"slice\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p></p> <p>GET /product/{id}</p> <p>Get a product by its ID.</p> ResponsePostman <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p></p> <p>DELETE /product/{id}</p> <p>Delete a product by its ID.</p> ResponsePostman <pre><code>Response code: 204 (no content)\n</code></pre> <p></p> <p>This MkDocs was created by Gustavo Barroso Souza Cruz</p>"}]}